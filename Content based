from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
import pandas as pd

# Sample movie data with genres
movies = pd.DataFrame({
    'movieId': [1, 2, 3, 4, 5],
    'title': ['Toy Story', 'Jumanji', 'Grumpier Old Men', 'Waiting to Exhale', 'Father of the Bride Part II'],
    'genres': ['Animation|Children|Comedy', 'Adventure|Children|Fantasy', 'Comedy|Romance', 'Comedy|Drama|Romance', 'Comedy']
})

# Create TF-IDF matrix for genres
tfidf = TfidfVectorizer()
tfidf_matrix = tfidf.fit_transform(movies['genres'])

# Compute cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

def content_based_recommendations(title, movies, cosine_sim, n=3):
    # Get index of the movie that matches the title
    idx = movies.index[movies['title'] == title].tolist()[0]
    
    # Get pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))
    
    # Sort the movies based on similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    
    # Get the scores of the n most similar movies
    sim_scores = sim_scores[1:n+1]
    
    # Get movie indices
    movie_indices = [i[0] for i in sim_scores]
    
    return movies.iloc[movie_indices][['title']]

# Get recommendations for "Toy Story"
print("\nContent-Based Recommendations for 'Toy Story':")
print(content_based_recommendations('Toy Story', movies, cosine_sim))
